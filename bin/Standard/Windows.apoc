$if Windows
$import "OS.apoc";
$import "Basic.apoc";

$type ATOM u16

CS_VREDRAW :u32: 0x0001;
CS_HREDRAW :u32: 0x0002;

WS_OVERLAPPED       :u32: 0x00000000;
WS_CAPTION          :u32: 0x00C00000;
WS_SYSMENU          :u32: 0x00080000;
WS_THICKFRAME       :u32: 0x00040000;
WS_MINIMIZEBOX      :u32: 0x00020000;
WS_MAXIMIZEBOX      :u32: 0x00010000;
WS_OVERLAPPEDWINDOW :u32: WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX;
WS_VISIBLE          :u32: 0x10000000;
CW_USEDEFAULT       :i32: 0x80000000;

fn $call c_decl GetLastError() -> u32;

fn $call c_decl CreateFileA(
  lpFileName: *u8,
  dwDesiredAccess: File_Permission,
  dwShareMode: u32,
  lpSecurityAttributes: *SECURITY_ATTRIBUTES,
  dwCreationDisposition: Create_Disposition,
  dwFlagsAndAttributes: File_Attribute,
  hTemplateFile: *void
) ->* void;

fn $call c_decl RegisterClassA(
	lpWndClass: *WNDCLASSA
) -> ATOM;

fn $call c_decl GetModuleHandleA(
	name: *u8
) -> *void;

fn $call c_decl CreateWindowA(
	class_name: *u8,
	window_name: *u8,
	style: u32,
	x: i32,
	y: i32,
	w: i32,
	h: i32,
	parent: *void,
	menu: *void,
	instance: *void,
	lparam: *void
) -> *void {
	-> CreateWindowExA(0, class_name, window_name, style, x, y, w, h, parent, menu, instance, lparam);
}

fn $call c_decl CreateWindowExA(
	ext_styles: u32,
	class_name: *u8,
	window_name: *u8,
	style: u32,
	x: i32,
	y: i32,
	w: i32,
	h: i32,
	parent: *void,
	menu: *void,
	instance: *void,
	lparam: *void
) -> *void;

fn $call c_decl WriteFile(
	hFile: *void,
	lpBuffer: *void,
	nNumberOfBytesToWrite: u32,
	lpNumberOfBytesWritten: *u32,
	lpOverlapped: *void // @Incomplete
) -> bool;

fn $call c_decl GetStdHandle(nStdHandle: STD_Handle) -> *void;

fn open_file(f_name:* u8, access: File_Access) -> *void
{
	win_access: File_Permission;
	if #bool(access & File_Access.READ)    win_access |= File_Permission.GENERIC_READ;
	if #bool(access & File_Access.WRITE)   win_access |= File_Permission.GENERIC_WRITE;
	if #bool(access & File_Access.EXECUTE) win_access |= File_Permission.GENERIC_EXECUTE;
	file := CreateFileA(f_name, win_access, 0, null, Create_Disposition.OPEN_ALWAYS,
			File_Attribute.NORMAL,
			null);
	-> file;
}

fn write_file(file: *void, data: *void, size: u32) -> bool
{
	written: u32;
	WriteFile(file, data, size, @written, null);
	result := written == size;
	-> result;
}

fn get_stdout() -> *void
{
	-> GetStdHandle(STD_Handle.OUTPUT);
}

struct WNDCLASSA {
	style: u32;
	wnd_proc: fn(*void, u32, u64, u64) -> u64;
	cb_cls_extra: i32;
	cb_wnd_extra: i32;
	instance: *void;
	icon: *void;
	cursor: *void;
	background: *void;
	menu_name: *u8;
	class_name: *u8;
}

struct SECURITY_ATTRIBUTES {
  len: u32;
  lpSecurityDescriptor:* void;
  bInheritHandle: bool;
}


DELETE                        :: (0x00010000);
READ_CONTROL                  :: (0x00020000);
WRITE_DAC                     :: (0x00040000);
WRITE_OWNER                   :: (0x00080000);
SYNCHRONIZE                   :: (0x00100000);

enum STD_Handle: u32
{
	INPUT  = -10;
	OUTPUT = -11;
	ERRRO  = -12;
}

// @Incomplete
enum File_Attribute
{
	NORMAL = 0x20;
}

enum Create_Disposition
{
	CREATE_NEW     = 1;
	CREATE_ALWAYS  = 2;
	OPEN_EXISTING  = 3;
	OPEN_ALWAYS    = 4;
	TRUNC_EXISTING = 5;
}

enum Generic_Rights
{
	READ    = 0x80000000;
	WRITE   = 0x40000000;
	EXECUTE = 0x20000000;
	ALL     = 0x10000000;
}

enum File_Permission
{
	READ_DATA        = 0x0001;
	WRITE_DATA       = 0x0002;
	APPEND_DATA      = 0x0004;
	READ_EA          = 0x0008;
	WRITE_EA         = 0x0010;
	EXECUTE          = 0x0020;
	READ_ATTRIBUTES  = 0x0080;
	WRITE_ATTRIBUTES = 0x0100;
	GENERIC_READ     = READ_CONTROL     |
					    READ_DATA        |
					    READ_ATTRIBUTES  |
					    READ_EA          |
					    SYNCHRONIZE;
	GENERIC_WRITE    = READ_CONTROL     |
					    WRITE_DATA       |
					    WRITE_ATTRIBUTES |
					    WRITE_EA         |
					    APPEND_DATA      |
					    SYNCHRONIZE;
	GENERIC_EXECUTE  = READ_CONTROL     |
					    READ_ATTRIBUTES  |
					    EXECUTE          |
					    SYNCHRONIZE;
}

$end_if

