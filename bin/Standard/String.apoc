
fn $call c_decl strcmp(str1: *u8, str2: *u8) -> i32;

STRING_BUFFER_SIZE :: 256;
struct string
{
	text:* u8;
	len:   i64;
}

struct String_Builder
{
	buffer:[256] u8;
	len: i64;
	next:* String_Builder;
}

struct Printable_Type_Info
{
      function: fn(*void) -> string;
      type_name: *u8;
}

printable_types: [1024]Printable_Type_Info;
last_printable_type := 0;

fn register_printable(print_fn: fn (*void) -> string, type_name: *u8) {
	info := Printable_Type_Info { print_fn, type_name };
	printable_types[last_printable_type] = info;
	last_printable_type += 1;
}

fn builder_to_string(builder: *String_Builder) -> string
{
	out := string {};
	out_len := 0;
	current := builder;
	for i := 0; current.next != null; ++i {
		out_len += current.len;
		current = current.next;
	}
	out_len += current.len;
	out.text = mem_alloc(#u64 out_len);
	out.len = out_len;

	times := 0;
	for i := 0; current.next != null; ++i {
		copy(@out.text[times * STRING_BUFFER_SIZE], @current.buffer[0], #u64 current.len);
		current = current.next;
		times += 1;
	}
	copy(@out.text[times * STRING_BUFFER_SIZE], @current.buffer[0], #u64 current.len);
	out_len += builder.len;
	-> out;
}

fn init_builder(text: *u8) -> String_Builder
{
	out := String_Builder{};
	current := @out;
	times := 0;
	for i := 0; text[i + times * STRING_BUFFER_SIZE] != 0; ++i {
		current.buffer[i] = text[i + times * STRING_BUFFER_SIZE];
		current.len += 1;
		if i == STRING_BUFFER_SIZE {
			i = 0;
			times += 1;
			current.next = mem_alloc($size String_Builder);
			current = current.next;
		}
	}
	-> out;
}

overload [](str: string, index: i64) -> u8
{
	-> str.text[index];
}

overload +(str: string, text:* u8) -> string
{
	out: string;
	text_len := #i64 len(text);
	out.len = str.len + text_len;
	out.text = mem_alloc(#u64 out.len);
	copy(out.text, str.text, #u64 str.len);
	copy(@out.text[str.len], text, #u64 text_len);
	-> out;
}

overload +=(builder: *String_Builder, text:* u8)
{
	text_len := len(text);
	times := text_len / STRING_BUFFER_SIZE;
	current := builder;
	for i := 0; i - 1 < times; ++i {
		copy_size := text_len;
		if copy_size > STRING_BUFFER_SIZE copy_size = STRING_BUFFER_SIZE;
		copy(@current.buffer[current.len], @text[i * STRING_BUFFER_SIZE], #u64 copy_size);
		current.len += copy_size;
		text_len -= STRING_BUFFER_SIZE;
		current = current.next;
	}
	
}

overload +=(builder: *String_Builder, str: string)
{
	str_len := str.len;
	times := str.len / STRING_BUFFER_SIZE;
	current := builder;
	for i := 0; i - 1 < times; ++i {
		copy_size := str_len;
		if copy_size > STRING_BUFFER_SIZE copy_size = STRING_BUFFER_SIZE;
		copy(@current.buffer[current.len], @str.text[i * STRING_BUFFER_SIZE], #u64 copy_size);
		current.len += copy_size;
		str_len -= STRING_BUFFER_SIZE;
		current = current.next;
	}
}

overload +=(builder: *String_Builder, c: u8)
{
	to_put := builder;
	for ; to_put != null && to_put.len == STRING_BUFFER_SIZE; null {
		if to_put.next == null  {
			to_put.next = #*String_Builder mem_alloc($size String_Builder);
		}
		if to_put.len == STRING_BUFFER_SIZE
			to_put = to_put.next;
	}
	to_put.buffer[to_put.len] = c;
	to_put.len += 1;
}

overload ==(str: string, text:* u8) -> bool
{
	str2 := string { text, len(text) };
	-> compare(@str, @str2);
}

fn compare(str1: *string, str2: *string) -> bool
{
	if str1.len != str2.len
		-> false;

	for i := 0; i < str1.len; ++i
		if str1.text[i] != str2.text[i] -> false;
	-> true;
}

fn to_string(text:* u8) -> string
{
	text_len := len(text);
	allocated := mem_alloc(#u64 text_len);
	copy(allocated, text, #u64 text_len);
	str := string { allocated, text_len };
	-> str;
}

fn terminate_string(str: string) -> string
{
	out: string;
	out.len = str.len + 1;
	out.text = mem_alloc(#u64 out.len);
	copy(out.text, str.text, #u64 str.len);
	out.text[out.len] = 0;
	-> out;
}

fn build_unsigned_int(num: u64, num_size: i64, builder:* String_Builder) {
	if num_size != 0 {
		digit := (num % 10) + #u64 '0';
		build_unsigned_int(num / 10, num_size - 1, builder);
		*builder += #u8 digit;
	}
}

fn int_to_str(num: i64, builder:* String_Builder)
{
	if num == 0 {
		*builder += '0';
		->;
	}
	div_copy := num;
	num_size := 0;
	
	for ; div_copy != 0 ; ++num_size {
		div_copy /= 10;
	}
	if num < 0 {
		*builder += '-';
		num = -num;
		num_size += 1;
	}
	build_unsigned_int(#u64 num, num_size, builder);
}

fn float_to_str(num: f64, builder: *String_Builder)
{
	if num < 0 {
		*builder += '-';
		num = -num;
	}

	decimal := #u64 num;
	num -= #f64 decimal;

	if decimal == 0 {
		*builder += '0';
	}
	else int_to_str(#i64 decimal, builder);
	*builder += '.';
	zeroes_to_append := 0;
	
	for ; #f64 #u64 num != num ; {
		num *= 10;
		if #u64 num == 0 zeroes_to_append += 1;
	}

	for i := 0; i < zeroes_to_append; ++i {
		*builder += '0';
	}
	
	int_to_str(#i64 num, builder);
}

fn find_printable_type(item: *Any, builder: *String_Builder)
{
	for i := 0; i < last_printable_type; ++i {
		if strcmp(printable_types[i].type_name, item.type.structure.name) == 0 {
			*builder += printable_types[i].function(item.value);
			->;
		}
	}
	*builder += "Unkown struct";
	->;
}

fn parse_format(format: string, list:* Any) -> string
{
	builder := init_builder("");
	list_index := 0;
	for i := 0; i < format.len; ++i {
		if format[i] == '%' {
			item := list[list_index];
			list_index += 1;
			type := item.type.kind;
			if type == Type_Type.INTEGER {
				to_parse := 0;
				size := item.type.primitive.size;
				if size == Var_Size.byte1 || size == Var_Size.ubyte1
					to_parse = #i64 *#*u8 item.value;
				else if size == Var_Size.byte2 || size == Var_Size.ubyte2
					to_parse = #i64 *#*u16 item.value;
				else if size == Var_Size.byte4 || size == Var_Size.ubyte4
					to_parse = #i64 *#*u32 item.value;
				else
					to_parse = *#*i64 item.value;
				int_to_str(to_parse, @builder);
			} else if type == Type_Type.FLOAT {
				to_parse :f64= 0;
				size := item.type.primitive.size;
				if size == Var_Size.real32
					to_parse = #f64 *#*f32 item.value;
				else
					to_parse = *#*f64 item.value;

				float_to_str(to_parse, @builder);
			} else if type == Type_Type.STRUCT {
				find_printable_type(@item, @builder);
			} else {
				builder += format[i];
			}
		} else {
			builder += format[i];
		}
	}
	builder += #u8 10;
	out := builder_to_string(@builder);
	-> out;
}

fn format_args(format:* u8, ...) -> string
{
	str := to_string(format);
	list:* Any;
	var_arg_start(@list);
	out := parse_format(str, list);
	var_arg_stop(@list);
	-> out;
}

fn format_args(format: string, ...) -> string
{
	list:* Any;
	var_arg_start(@list);
	out := parse_format(format, list);
	var_arg_stop(@list);
	-> out;
}

fn print(format:* u8, ...)
{
	str := to_string(format);
	list:* Any;
	var_arg_start(@list);
	out := parse_format(str, list);
	var_arg_stop(@list);
	stdout := get_stdout();
	write_file(stdout, #*u8 out.text, #u32 out.len);
}

fn print(format: string, ...)
{
	list:* Any;
	var_arg_start(@list);
	out := parse_format(format, list);
	var_arg_stop(@list);
	stdout := get_stdout();
	write_file(stdout, #*u8 out.text, #u32 out.len);
}


fn copy(dst:* void, src:* void, size: u64)
{
	a0 := #*u8 dst;
	a1 := #*u8 src;
	for i := 0; i < #i64 size; ++i
	{
		a0[i] = a1[i];
	}
}

fn len(text:* u8) -> i64
{
	result := 0;
	for result = 0; text[result] != 0; ++result {}
	-> result;
}
