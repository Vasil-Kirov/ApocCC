
fn $intrinsic var_arg_start(list: **Any);
fn $intrinsic var_arg_stop(list: **Any);
fn $intrinsic get_type(ptr:*void) -> Type_Info;
fn $intrinsic get_f128(e1: f32) -> f128;
fn $intrinsic get_f128(e1: f32, e2: f32, e3: f32, e4: f32) -> f128;
fn $intrinsic get_i128(e1: i32) -> i128;
fn $intrinsic get_i128(e1: i32, e2: i32, e3: i32, e4: i32) -> i128;

true  :: #bool  1;
false :: #bool  0;
null  :: #*void 0;

STRING_BUFFER_SIZE :: 256;
struct string
{
	text:* u8;
	len:   i64;
}

struct String_Builder
{
	buffer:[256] u8;
	len: i64;
	next:* String_Builder;
}


fn return_true() -> bool {
	-> false;
}

enum Call_Conv: i32
{
	CALL_APOC   = 1;
	CALL_C_DECL = 2;
}

enum Var_Size: i32
{
	byte1        = 1;
	byte2        = 2;
	byte4        = 3;
	byte8        = 4;
	ubyte1       = 5;
	ubyte2       = 6;
	ubyte4       = 7;
	ubyte8       = 8;
	real32       = 9;
	real64       = 10;
	empty_void   = 11;
	logical_bit  = 12;
}

enum Type_Type: i32
{
	INTEGER = 3;
	FLOAT;
	STRUCT;
	ARRAY;
	POINTER;
	VOID;
	STRING;
	BOOLEAN;
	FUNC;
	ENUM   = 12;
}

struct Va_List
{
	ptr:*i8;
}

struct __Internal_Context {
	return_val:* void;
}

struct Any {
	type:*  Type_Info;
	value:* void;
}

struct $union Type_Info {
	kind:       Type_Type;
	primitive:  Type_Primitive;
	structure:  Type_Struct;
	array:      Type_Array;
	pointer:    Type_Pointer;
	enumerator: Type_Enum;
	function:   Type_Func;
}

struct Type_Primitive {
	kind: Type_Type;
	size: Var_Size
}

struct Type_Struct {
	kind:           Type_Type;
	member_count:   i32;
	is_union:       bool;
	is_packed:      bool;
	name:*          u8;
	member_names:** u8;
	member_types:*  Type_Info;
}

struct Type_Array {
	kind:  Type_Type;
	type:* Type_Info;
	elem_count: u64;
}

struct Type_Pointer {
	kind:     Type_Type;
	pointed:* Type_Info;
}

struct Type_Enum {
	kind:    Type_Type;
	type:    Type_Primitive;
	names:** u8;
	values:* u64;
}

struct Type_Func {
	kind:               Type_Type;
	param_types:*       Type_Info;
	return_type:*       Type_Info;
	calling_convention: Call_Conv;
}

